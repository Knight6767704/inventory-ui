name: Build and Push Docker Images for Microfrontends

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        microfrontend: [admin, inventory, sales, shell, warehouse]

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.microfrontend }}-${{ hashFiles('./projects/${{ matrix.microfrontend }}/Dockerfile.${{ matrix.microfrontend }}') }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.microfrontend }}-

      # Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Preprocess repository owner to lowercase (for use in image tags)
      - name: Preprocess repository owner to lowercase
        id: preprocess
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # Build Docker image for the microfrontend
      - name: Build Docker image for ${{ matrix.microfrontend }}
        run: |
          docker build -f ./projects/${{ matrix.microfrontend }}/Dockerfile.${{ matrix.microfrontend }} \
            -t ghcr.io/${{ env.REPO_OWNER }}/${{ matrix.microfrontend }}-ui:${{ github.sha }} .

      # Push Docker image for the microfrontend
      - name: Push Docker image for ${{ matrix.microfrontend }}
        run: |
          docker push ghcr.io/${{ env.REPO_OWNER }}/${{ matrix.microfrontend }}-ui:${{ github.sha }}

      # Push Docker image with 'latest' tag
      - name: Push Docker image with 'latest' tag
        run: |
          docker tag ghcr.io/${{ env.REPO_OWNER }}/${{ matrix.microfrontend }}-ui:${{ github.sha }} ghcr.io/${{ env.REPO_OWNER }}/${{ matrix.microfrontend }}-ui:latest
          docker push ghcr.io/${{ env.REPO_OWNER }}/${{ matrix.microfrontend }}-ui:latest

      # Authenticate to Docker Hub (if needed)
      - name: Authenticate to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      # Compare the image built in the pull request with the one in production using Docker Scout
      - name: Docker Scout - Vulnerability Scan
        id: docker-scout
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ghcr.io/${{ env.REPO_OWNER }}/${{ matrix.microfrontend }}-ui:${{ github.sha }}
          only-severities: critical,high
          github-token: ${{ secrets.GITHUB_TOKEN }}
          exit-code: true  # Fail the build if critical or high vulnerabilities are found

      # Optionally, you can add a step to create a comment on the PR with the results of the vulnerability scan
      - name: Add Docker Scout Comment to PR (optional)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          COMMENT=$(docker scout report --output json)
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -X POST \
               -d '{"body": "Docker Scout vulnerability scan results: '"$COMMENT"'"}' \
               "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
